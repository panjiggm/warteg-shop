// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    store         Store[]
    cart          ProductCart[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Store {
    id              String         @id @default(cuid())
    title           String
    description     String
    user            User?          @relation(fields: [userId], references: [id])
    userId          String?
    images          StoreImage[]
    products        Product[]
    StoreCategory   StoreCategory? @relation(fields: [storeCategoryId], references: [id])
    storeCategoryId String?
}

model StoreCategory {
    id     String  @id @default(cuid())
    title  String
    stores Store[]
}

model StoreImage {
    id      String  @id @default(cuid())
    url     String
    key     String
    title   String
    store   Store?  @relation(fields: [storeId], references: [id], onDelete: Cascade)
    storeId String?
}

model Product {
    id                String          @id @default(cuid())
    title             String
    description       String
    price             Int
    createdAt         DateTime        @default(now())
    updatedAt         DateTime        @updatedAt
    images            ProductImage[]
    productCategory   ProductCategory @relation(fields: [productCategoryId], references: [id])
    productCategoryId String
    store             Store?          @relation(fields: [storeId], references: [id])
    storeId           String?
    productCart       ProductCart?    @relation(fields: [productCartId], references: [id])
    productCartId     String?
}

model ProductCategory {
    id       String    @id @default(cuid())
    title    String
    products Product[]
}

model ProductImage {
    id        String   @id @default(cuid())
    url       String
    key       String
    title     String
    product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String?
}

model ProductCart {
    id         String    @id @default(cuid())
    quantity   Int
    totalPrice Int
    products   Product[]
    user       User?     @relation(fields: [userId], references: [id])
    userId     String?
}
